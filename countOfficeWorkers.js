// Офис X работает по правилам коворкинга: каждый сотрудник может работать из дома или приходить в офис. В спокойные дни в офисе тихо, приходят пара-тройка людей. А ближе к релизам/отчетным периодам/другим завалам людей гораздо больше, но все сотрудники всё равно никогда не выходят.
// Начальство хочет какое-то время понаблюдать, сколько же человек максимум приходят в офис, чтобы сократить количество «посадочных мест» и меньше платить за аренду. Для этого они наладили систему, которая фиксирует время захода и выхода людей из офиса, и планируют из этих данных получить максимальное количество присутствующих сотрудников в день. Система эта сохраняет нужные данные в формате [времяВхода, времяВыхода] для каждого сотрудника. Если люди входят и выходят одновременно, считается, что выход происходит раньше (уходящий человек уже встал с места и освободил его, а входящий ещё не успел занять).
// Ваша задача — написать функцию, получающую из информации в системе максимальное количество одновременно находящихся сотрудников в офисе.

function countOfficeWorkers(input) {
  const logs = {};
  for (const [startTime, endTime] of input) {
    for (let i = startTime; i < endTime; i++) {
      logs[i] = logs[i] ? logs[i] + 1 : 1;
    }
  }
  return Math.max(...Object.values(logs), 0);
}

countOfficeWorkers([[1, 2], [1, 10], [4, 9], [8, 15], [5, 6], [8, 16]]);
